#
# GRAKN.AI - THE KNOWLEDGE GRAPH
# Copyright (C) 2019 Grakn Labs Ltd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

version: 2.1
orbs:
  win: circleci/windows@2.0.0
commands:
  install-bazel-linux-rbe:
    steps:
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/dependencies/master/tool/bazelinstall/linux.sh
      - run: bash ./linux.sh && rm ./linux.sh
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/dependencies/master/tool/bazelinstall/rbe.sh
      - run: bash ./rbe.sh && rm ./rbe.sh

  install-bazel-mac:
    steps:
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/dependencies/master/tool/bazelinstall/mac.sh
      - run: bash ./mac.sh && rm ./mac.sh

  install-linux-dependencies:
    steps:
      - run: sudo apt install xvfb libxtst6 libxss1 libgtk2.0-0 libasound2 libgconf-2-4 -y
      - run: Xvfb :99 & export DISPLAY=:99

  run-bazel-rbe:
    parameters:
      command:
        type: string
    steps:
      - run: bazel run @graknlabs_build_tools//ci:run-bazel-rbe -- << parameters.command >>

  run-grakn-server-linux:
    steps:
      - run-bazel-rbe:
          command: bazel build @graknlabs_grakn_core//:assemble-linux-targz
      - run: mkdir -p dist && tar -xvzf bazel-bin/external/graknlabs_grakn_core/grakn-core-all-linux.tar.gz -C ./dist/
      - run: nohup ./dist/grakn-core-all-linux/grakn server start

  run-grakn-server-mac:
    steps:
      - run: bazel build @graknlabs_grakn_core//:assemble-mac-zip
      - run: unzip bazel-bin/external/graknlabs_grakn_core/grakn-core-all-mac.zip -d ./dist/
      - run: nohup ./dist/grakn-core-all-mac/grakn server start

jobs:
  test-linux:
    machine: 
      image: ubuntu-1604:201903-01
    working_directory: ~/workbase
    steps:
      - install-linux-dependencies
      - install-bazel-linux-rbe
      - checkout
      - run-grakn-server-linux
      - run: bazel run @nodejs//:bin/yarn install
      - run: bazel run @nodejs//:bin/yarn run unit
      - run: bazel run @nodejs//:bin/yarn run integration
      - run: bazel run @nodejs//:bin/yarn run pack && GRAKN_PATH=./dist/grakn-core-all-linux/ bazel run @nodejs//:bin/yarn run e2e

  test-mac:
    macos:
      xcode: "10.2.1"
    working_directory: ~/workbase
    steps:
      - checkout
      - install-bazel-mac
      - run-grakn-server-mac
      - run: bazel run @nodejs//:bin/yarn install
      - run: bazel run @nodejs//:bin/yarn run unit
      - run: bazel run @nodejs//:bin/yarn run integration
      - run: bazel run @nodejs//:bin/yarn run pack && GRAKN_PATH=./dist/grakn-core-all-mac/ bazel run @nodejs//:bin/yarn run e2e

  assemble-linux:
    machine: 
      image: ubuntu-1604:201903-01
    working_directory: ~/workbase
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: bazel run @nodejs//:bin/yarn install
      - run: bazel run @nodejs//:bin/yarn run build
      - run: mkdir -p ~/distribution && mv ./build/*.tar.gz ~/distribution/grakn-workbase-linux-$(cat VERSION).tar.gz
      - persist_to_workspace:
          root: ~/distribution
          paths:
            - ./*

  assemble-mac:
    macos:
      xcode: "10.2.1"
    working_directory: ~/workbase
    steps:
      - install-bazel-mac
      - checkout
      - run: bazel run @nodejs//:bin/yarn install
      - run: |
          export CSC_LINK="$APPLE_CODE_SIGNING_CERTIFICATE_URL"
          export CSC_KEY_PASSWORD="$APPLE_CODE_SIGNING_PASSWORD"
          bazel run @nodejs//:bin/yarn run build
      - run: mkdir -p ~/distribution && mv ./build/*.dmg ~/distribution/grakn-workbase-mac-$(cat VERSION).dmg
      - persist_to_workspace:
          root: ~/distribution
          paths:
            - ./*

  assemble-windows:
    executor:
        name: win/default
        shell: cmd.exe
    working_directory: ~/workbase
    steps:
      - checkout
      - run: .circleci\windows\prepare.bat
      - run: .circleci\windows\assemble.bat
      - persist_to_workspace:
          root: distribution
          paths:
            - ./*

  cache-distribution:
    machine: 
      image: ubuntu-1604:201903-01
    working_directory: ~/workbase
    steps:
      - attach_workspace:
          at: ~/distribution
      - restore_cache:
          key: distribution-{{ .Environment.CIRCLE_SHA1 }}
      - run: |
          if [ "$(ls -A ~/cache)" ]; then
            ls ~/cache/
            mkdir -p ~/distribution
            cp ~/cache/* ~/distribution/
          else
            ls ~/distribution
            mkdir -p ~/cache
            cp ~/distribution/* ~/cache/
          fi
      - save_cache:
          key: distribution-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/cache
      - persist_to_workspace:
          root: ~/distribution
          paths:
            - ./*

  release-approval:
    machine: 
      image: ubuntu-1604:201903-01
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          export RELEASE_APPROVAL_USERNAME=$REPO_GITHUB_USERNAME
          export RELEASE_APPROVAL_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @graknlabs_build_tools//ci:release-approval

  release-validate:
    machine: 
      image: ubuntu-1604:201903-01
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          bazel run @graknlabs_build_tools//ci:release-validate-deps -- \
            graknlabs_client_nodejs

  deploy-github:
    machine: 
      image: ubuntu-1604:201903-01
    working_directory: ~/workbase
    steps:
      - attach_workspace:
          at: ~/distribution
      - install-bazel-linux-rbe
      - checkout
      - run: |
          pip install certifi
          export RELEASE_NOTES_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @graknlabs_build_tools//ci:release-notes -- workbase $(cat VERSION) ./RELEASE_TEMPLATE.md
      - run:
          name: "Publish Draft Release on GitHub"
          command: |
            wget https://github.com/tcnksm/ghr/releases/download/v0.12.1/ghr_v0.12.1_linux_amd64.tar.gz
            tar -xf ghr_v0.12.1_linux_amd64.tar.gz
            ghr_v0.12.1_linux_amd64/ghr -t ${REPO_GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} -n "Grakn Workbase $(cat VERSION)" -b "$(cat ./RELEASE_TEMPLATE.md)" \
              -c ${CIRCLE_SHA1} -delete -draft $(cat VERSION) ~/distribution/

  deploy-brew:
    machine: 
      image: ubuntu-1604:201903-01
    working_directory: ~/workbase
    steps:
      - attach_workspace:
          at: ~/distribution
      - install-bazel-linux-rbe
      - checkout
      - run: cp ~/distribution/grakn-workbase-mac-$(cat VERSION).dmg ~/workbase/
      - run:
          command: |
            export DEPLOY_BREW_TOKEN=$REPO_GITHUB_TOKEN
            export DEPLOY_BREW_CHECKSUM=$(sha256sum grakn-workbase-mac-$(cat VERSION).dmg | awk '{print $1}')
            bazel run --define version=$(cat VERSION) //:deploy-brew -- release

  release-cleanup:
    machine: 
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run: git push --delete https://$REPO_GITHUB_TOKEN@github.com/graknlabs/workbase $CIRCLE_BRANCH

workflows:
  workbase:
    jobs:
      - test-linux:
          filters:
            branches:
              ignore: workbase-release-branch
      - test-mac:
          filters:
            branches:
              ignore: workbase-release-branch
      - assemble-linux:
          filters:
            branches:
              only: 1.3.2
          requires:
            - test-linux
            - test-mac
      - assemble-mac:
          filters:
            branches:
              only: 1.3.2
          requires:
            - test-linux
            - test-mac
      - assemble-windows:
          filters:
            branches:
              only: 1.3.2
      - cache-distribution:
          filters:
            branches:
              only: 1.3.2
          requires:
            - assemble-linux
            - assemble-mac
            - assemble-windows
      - release-approval:
          filters:
            branches:
              only: 1.3.2
          requires:
            - cache-distribution

  workbase-release:
    jobs:
      - release-validate:
          filters:
            branches:
              only: workbase-release-branch
      - cache-distribution:
          filters:
            branches:
              only: workbase-release-branch
          requires:
            - release-validate
      - deploy-github:
          filters:
            branches:
              only: workbase-release-branch
          requires:
            - cache-distribution
      - deploy-approval:
          type: approval
          filters:
            branches:
              only: workbase-release-branch
          requires:
            - deploy-github
      - deploy-brew:
          filters:
            branches:
              only: workbase-release-branch
          requires:
            - deploy-approval
      - release-cleanup:
          filters:
            branches:
              only: workbase-release-branch
          requires:
            - deploy-brew
